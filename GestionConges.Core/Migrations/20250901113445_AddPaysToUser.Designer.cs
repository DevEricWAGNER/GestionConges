// <auto-generated />
using System;
using GestionConges.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionConges.Core.Migrations
{
    [DbContext(typeof(GestionCongesContext))]
    [Migration("20250901113445_AddPaysToUser")]
    partial class AddPaysToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionConges.Core.Models.DemandeConge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentaire")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CommentaireRefus")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateValidationFinale")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NombreJours")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int>("TypeAbsenceId")
                        .HasColumnType("int");

                    b.Property<int>("TypeJourneeDebut")
                        .HasColumnType("int");

                    b.Property<int>("TypeJourneeFin")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeAbsenceId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("DemandesConges");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId", "Nom")
                        .IsUnique();

                    b.ToTable("Equipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direction générale",
                            Nom = "Direction",
                            SocieteId = 1
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe projets",
                            Nom = "Projets",
                            SocieteId = 1
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe commerciale",
                            Nom = "Commercial",
                            SocieteId = 1
                        },
                        new
                        {
                            Id = 4,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe transport Dambach",
                            Nom = "Transport",
                            SocieteId = 2
                        },
                        new
                        {
                            Id = 5,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe logistique Dambach",
                            Nom = "Logistique",
                            SocieteId = 2
                        },
                        new
                        {
                            Id = 6,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe production Kronembourg",
                            Nom = "Production",
                            SocieteId = 3
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.JourFerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Recurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("Date", "Actif");

                    b.ToTable("JoursFeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Nouvel An",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            Date = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Lundi de Pâques",
                            Recurrent = false,
                            Type = "National"
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            Date = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Fête du Travail",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 4,
                            Actif = true,
                            Date = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Fête de la Victoire",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 5,
                            Actif = true,
                            Date = new DateTime(2025, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Ascension",
                            Recurrent = false,
                            Type = "National"
                        },
                        new
                        {
                            Id = 6,
                            Actif = true,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Lundi de Pentecôte",
                            Recurrent = false,
                            Type = "National"
                        },
                        new
                        {
                            Id = 7,
                            Actif = true,
                            Date = new DateTime(2025, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Fête Nationale",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 8,
                            Actif = true,
                            Date = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Assomption",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 9,
                            Actif = true,
                            Date = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Toussaint",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 10,
                            Actif = true,
                            Date = new DateTime(2025, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Armistice",
                            Recurrent = true,
                            Type = "National"
                        },
                        new
                        {
                            Id = 11,
                            Actif = true,
                            Date = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Noël",
                            Recurrent = true,
                            Type = "National"
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.ParametreGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Categorie");

                    b.HasIndex("Cle")
                        .IsUnique();

                    b.ToTable("ParametresGlobaux");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categorie = "Calendrier",
                            Cle = "JoursOuvres",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jours ouvrés (1=Lundi, 7=Dimanche)",
                            Valeur = "1,2,3,4,5"
                        },
                        new
                        {
                            Id = 2,
                            Categorie = "Calendrier",
                            Cle = "ExclureFeries",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exclure jours fériés du calcul",
                            Valeur = "true"
                        },
                        new
                        {
                            Id = 3,
                            Categorie = "Calendrier",
                            Cle = "DebutAnneeConges",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mois de début d'année de congés (1-12)",
                            Valeur = "1"
                        },
                        new
                        {
                            Id = 4,
                            Categorie = "Validation",
                            Cle = "DelaiValidationValidateur",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Délai validation chef pôle (jours)",
                            Valeur = "7"
                        },
                        new
                        {
                            Id = 5,
                            Categorie = "Validation",
                            Cle = "DelaiValidationAdmin",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Délai validation chef équipe (jours)",
                            Valeur = "5"
                        },
                        new
                        {
                            Id = 6,
                            Categorie = "Validation",
                            Cle = "PreavisMinimum",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Préavis minimum congés (jours)",
                            Valeur = "14"
                        },
                        new
                        {
                            Id = 7,
                            Categorie = "Validation",
                            Cle = "AnticipationMaximum",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Anticipation maximum (jours)",
                            Valeur = "365"
                        },
                        new
                        {
                            Id = 8,
                            Categorie = "Validation",
                            Cle = "EscaladeAutomatique",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Escalade auto si délai dépassé",
                            Valeur = "false"
                        },
                        new
                        {
                            Id = 9,
                            Categorie = "Email",
                            Cle = "EmailActif",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Notifications email activées",
                            Valeur = "false"
                        },
                        new
                        {
                            Id = 10,
                            Categorie = "Email",
                            Cle = "ServeurSMTP",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Serveur SMTP",
                            Valeur = "smtp.gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            Categorie = "Email",
                            Cle = "PortSMTP",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Port SMTP",
                            Valeur = "587"
                        },
                        new
                        {
                            Id = 12,
                            Categorie = "Email",
                            Cle = "UtilisateurSMTP",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nom d'utilisateur SMTP",
                            Valeur = ""
                        },
                        new
                        {
                            Id = 13,
                            Categorie = "Email",
                            Cle = "MotDePasseSMTP",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mot de passe SMTP (crypté)",
                            Valeur = ""
                        },
                        new
                        {
                            Id = 14,
                            Categorie = "Email",
                            Cle = "SSLSMTP",
                            DateModification = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Utiliser SSL/TLS",
                            Valeur = "true"
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.Pole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId", "Nom")
                        .IsUnique();

                    b.ToTable("Poles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe de développement logiciel",
                            EquipeId = 2,
                            Nom = "Développement"
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe infrastructure et réseaux",
                            EquipeId = 2,
                            Nom = "Réseaux"
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe Reflex",
                            EquipeId = 2,
                            Nom = "Reflex"
                        },
                        new
                        {
                            Id = 4,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Équipe logistique et support",
                            EquipeId = 5,
                            Nom = "Logistique"
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.RegleTypeAbsence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnticipationMaximum")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumConsecutif")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumParAn")
                        .HasColumnType("int");

                    b.Property<bool>("NecessiteJustification")
                        .HasColumnType("bit");

                    b.Property<int?>("PreavisMinimum")
                        .HasColumnType("int");

                    b.Property<string>("ReglesPersonnalisees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeAbsenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeAbsenceId")
                        .IsUnique();

                    b.ToTable("ReglesTypesAbsences");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.ToTable("Societes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Siège principal de l'entreprise",
                            Nom = "Siège Social"
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Site de Dambach",
                            Nom = "Dambach"
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Site de Kronembourg",
                            Nom = "Kronembourg"
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.TypeAbsence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<string>("CouleurHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("NecessiteValidation")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdreAffichage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypesAbsences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            CouleurHex = "#e74c3c",
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NecessiteValidation = true,
                            Nom = "Congés Payés",
                            OrdreAffichage = 1
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            CouleurHex = "#3498db",
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NecessiteValidation = true,
                            Nom = "RTT",
                            OrdreAffichage = 2
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            CouleurHex = "#f39c12",
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NecessiteValidation = true,
                            Nom = "Maladie",
                            OrdreAffichage = 3
                        },
                        new
                        {
                            Id = 4,
                            Actif = true,
                            CouleurHex = "#27ae60",
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NecessiteValidation = true,
                            Nom = "Déplacement",
                            OrdreAffichage = 4
                        },
                        new
                        {
                            Id = 5,
                            Actif = true,
                            CouleurHex = "#9b59b6",
                            DateCreation = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NecessiteValidation = true,
                            Nom = "Formation",
                            OrdreAffichage = 5
                        });
                });

            modelBuilder.Entity("GestionConges.Core.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("CodePays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DerniereConnexion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("MotDePasseHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PoleId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EquipeId");

                    b.HasIndex("PoleId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("GestionConges.Core.Models.UtilisateurSocieteSecondaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateAffectation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId");

                    b.HasIndex("UtilisateurId", "SocieteId")
                        .IsUnique();

                    b.ToTable("UtilisateursSocietesSecondaires");
                });

            modelBuilder.Entity("GestionConges.Core.Models.ValidateurSociete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateAffectation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("NiveauValidation")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<int>("ValidateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId");

                    b.HasIndex("ValidateurId", "SocieteId", "NiveauValidation")
                        .IsUnique();

                    b.ToTable("ValidateursSocietes");
                });

            modelBuilder.Entity("GestionConges.Core.Models.ValidationDemande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approuve")
                        .HasColumnType("bit");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemandeId")
                        .HasColumnType("int");

                    b.Property<int>("OrdreValidation")
                        .HasColumnType("int");

                    b.Property<int>("ValidateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandeId");

                    b.HasIndex("ValidateurId");

                    b.ToTable("ValidationsDemanades");
                });

            modelBuilder.Entity("GestionConges.Core.Models.DemandeConge", b =>
                {
                    b.HasOne("GestionConges.Core.Models.TypeAbsence", "TypeAbsence")
                        .WithMany("Demandes")
                        .HasForeignKey("TypeAbsenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionConges.Core.Models.Utilisateur", "Utilisateur")
                        .WithMany("Demandes")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAbsence");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Equipe", b =>
                {
                    b.HasOne("GestionConges.Core.Models.Societe", "Societe")
                        .WithMany("Equipes")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Pole", b =>
                {
                    b.HasOne("GestionConges.Core.Models.Equipe", "Equipe")
                        .WithMany("Poles")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("GestionConges.Core.Models.RegleTypeAbsence", b =>
                {
                    b.HasOne("GestionConges.Core.Models.TypeAbsence", "TypeAbsence")
                        .WithMany()
                        .HasForeignKey("TypeAbsenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAbsence");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Utilisateur", b =>
                {
                    b.HasOne("GestionConges.Core.Models.Equipe", "Equipe")
                        .WithMany("Employes")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionConges.Core.Models.Pole", "Pole")
                        .WithMany("Employes")
                        .HasForeignKey("PoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestionConges.Core.Models.Societe", "Societe")
                        .WithMany("EmployesPrincipaux")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Pole");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("GestionConges.Core.Models.UtilisateurSocieteSecondaire", b =>
                {
                    b.HasOne("GestionConges.Core.Models.Societe", "Societe")
                        .WithMany("UtilisateursSecondaires")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionConges.Core.Models.Utilisateur", "Utilisateur")
                        .WithMany("SocietesSecondaires")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Societe");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("GestionConges.Core.Models.ValidateurSociete", b =>
                {
                    b.HasOne("GestionConges.Core.Models.Societe", "Societe")
                        .WithMany("Validateurs")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionConges.Core.Models.Utilisateur", "Validateur")
                        .WithMany("SocietesValidation")
                        .HasForeignKey("ValidateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Societe");

                    b.Navigation("Validateur");
                });

            modelBuilder.Entity("GestionConges.Core.Models.ValidationDemande", b =>
                {
                    b.HasOne("GestionConges.Core.Models.DemandeConge", "Demande")
                        .WithMany("Validations")
                        .HasForeignKey("DemandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionConges.Core.Models.Utilisateur", "Validateur")
                        .WithMany("ValidationsEffectuees")
                        .HasForeignKey("ValidateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Demande");

                    b.Navigation("Validateur");
                });

            modelBuilder.Entity("GestionConges.Core.Models.DemandeConge", b =>
                {
                    b.Navigation("Validations");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Equipe", b =>
                {
                    b.Navigation("Employes");

                    b.Navigation("Poles");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Pole", b =>
                {
                    b.Navigation("Employes");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Societe", b =>
                {
                    b.Navigation("EmployesPrincipaux");

                    b.Navigation("Equipes");

                    b.Navigation("UtilisateursSecondaires");

                    b.Navigation("Validateurs");
                });

            modelBuilder.Entity("GestionConges.Core.Models.TypeAbsence", b =>
                {
                    b.Navigation("Demandes");
                });

            modelBuilder.Entity("GestionConges.Core.Models.Utilisateur", b =>
                {
                    b.Navigation("Demandes");

                    b.Navigation("SocietesSecondaires");

                    b.Navigation("SocietesValidation");

                    b.Navigation("ValidationsEffectuees");
                });
#pragma warning restore 612, 618
        }
    }
}
